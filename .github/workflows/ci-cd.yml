name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      cloud-provider:
        description: 'Choose the cloud provider'
        required: true
        default: 'azure'
        type: choice
        options:
          - aws
          - azure
          - gcp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Lint code
        run: |
          pip install pylint
          pylint $(git ls-files '*.py')

      - name: Run tests
        run: python -m unittest discover -s tests

  deploy_aws:
    if: github.event.inputs.cloud-provider == 'aws'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/aws

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform/aws

      - name: Extract IP
        id: extract_ip
        run: echo "::set-output name=ip::$(cat ./terraform/aws/ip_address.txt)"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run Ansible playbook
        run: |
          echo "[app_server]" > ansible/inventory
          echo "app_server ansible_host=${{ steps.extract_ip.outputs.ip }}" >> ansible/inventory
          ansible-playbook -i ansible/inventory ansible/playbook.yml

  deploy_azure:
    if: github.event.inputs.cloud-provider == 'azure'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/azure

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform/azure

      - name: Extract IP
        id: extract_ip
        run: echo "::set-output name=ip::$(cat ./terraform/azure/ip_address.txt)"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run Ansible playbook
        run: |
          echo "[app_server]" > ansible/inventory
          echo "app_server ansible_host=${{ steps.extract_ip.outputs.ip }}" >> ansible/inventory
          ansible-playbook -i ansible/inventory ansible/playbook.yml

  deploy_gcp:
    if: github.event.inputs.cloud-provider == 'gcp'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/gcp

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform/gcp

      - name: Extract IP
        id: extract_ip
        run: echo "::set-output name=ip::$(cat ./terraform/gcp/ip_address.txt)"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run Ansible playbook
        run: |
          echo "[app_server]" > ansible/inventory
          echo "app_server ansible_host=${{ steps.extract_ip.outputs.ip }}" >> ansible/inventory
          ansible-playbook -i ansible/inventory ansible/playbook.yml
